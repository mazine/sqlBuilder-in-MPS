package mazin.sqlBuilder.generator.template.main;

/*Generated by MPS */

import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.generator.template.PropertyMacroContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.apache.commons.lang.StringUtils;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.generator.template.ReferenceMacroContext;
import jetbrains.mps.generator.template.IfMacroContext;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodeContext;
import jetbrains.mps.generator.template.TemplateQueryContext;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodesContext;

public class QueriesGenerated {
  public static Object propertyMacro_GetPropertyValue_2591744203542982715(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "name");
  }

  public static Object propertyMacro_GetPropertyValue_2591744203542985384(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "value");
  }

  public static Object propertyMacro_GetPropertyValue_1217947231272738360(final IOperationContext operationContext, final PropertyMacroContext _context) {
    String table = (StringUtils.isNotEmpty(SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), "table", false), "name")) ?
      SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), "table", false), "name") :
      SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), "table", false), "table", false), "name")
    );
    String column = SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), "column", false), "name");
    return table + "." + column;
  }

  public static Object propertyMacro_GetPropertyValue_1217947231272751919(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return _context.createUniqueName(SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), "column", true), "column", false), "name"), SNodeOperations.getContainingRoot(_context.getNode()));
  }

  public static Object propertyMacro_GetPropertyValue_1217947231272792974(final IOperationContext operationContext, final PropertyMacroContext _context) {
    int table = ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "tableReference", true)).count() - 1 - ((Integer) _context.getVariable("index"));
    SNode tableReference = ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "tableReference", true)).getElement(table);
    String name = SPropertyOperations.getString(SLinkOperations.getTarget(tableReference, "table", false), "name");
    if (StringUtils.isNotEmpty(SPropertyOperations.getString(tableReference, "name"))) {
      name = name + " as " + SPropertyOperations.getString(tableReference, "name");
    }
    return name;
  }

  public static Object propertyMacro_GetPropertyValue_1217947231272804509(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return _context.createUniqueName(SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), "column", true), "column", false), "name"), SNodeOperations.getContainingRoot(_context.getNode()));
  }

  public static Object propertyMacro_GetPropertyValue_5538758456164843035(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return _context.createUniqueName(SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), "column", true), "column", false), "name"), SNodeOperations.getContainingRoot(_context.getNode()));
  }

  public static Object referenceMacro_GetReferent_2591744203542982738(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "filterClass", false);
  }

  public static Object referenceMacro_GetReferent_1217947231272880945(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "baseMethodDeclaration", false);
  }

  public static boolean ifMacro_Condition_1217947231272792917(final IOperationContext operationContext, final IfMacroContext _context) {
    return ((Integer) _context.getVariable("index")) == ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "tableReference", true)).count() - 1;
  }

  public static SNode sourceNodeQuery_2591744203542985042(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "query", true);
  }

  public static SNode sourceNodeQuery_2591744203542985134(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "fromBlock", true);
  }

  public static SNode sourceNodeQuery_2591744203542985155(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "whereBlock", true);
  }

  public static SNode sourceNodeQuery_1217947231272797436(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "column", true);
  }

  public static SNode sourceNodeQuery_1217947231272797415(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "column", true);
  }

  public static SNode sourceNodeQuery_1217947231272797428(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "expression", true);
  }

  public static SNode sourceNodeQuery_1217947231272804501(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "column", true);
  }

  public static SNode sourceNodeQuery_1217947231272805314(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "expression", true);
  }

  public static SNode sourceNodeQuery_5538758456164843071(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "condition", true);
  }

  public static SNode sourceNodeQuery_5538758456164843027(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "column", true);
  }

  public static SNode sourceNodeQuery_5538758456164843144(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "expression", true);
  }

  public static Object templateArgumentQuery_1217947231272792960(final IOperationContext operationContext, final TemplateQueryContext _context) {
    return ((Integer) _context.getVariable("index")) + 1;
  }

  public static Iterable sourceNodesQuery_2591744203542985299(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "term", true);
  }

  public static Iterable sourceNodesQuery_1217947231272880931(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "actualArgument", true);
  }

  public static Iterable sourceNodesQuery_1217947231272880957(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "typeArgument", true);
  }
}

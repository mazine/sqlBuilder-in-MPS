package mazin.sqlBuilder.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseReferenceScopeProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.ReferencePresentationContext;
import org.apache.commons.lang.StringUtils;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.List;

public class ColumnReference_Constraints extends BaseConstraintsDescriptor {
  private static SNodePointer breakingNode_vw8nfq_a0a3a0a0a1a0b0a1a0 = new SNodePointer("r:3549da7a-55e7-4df5-8c08-3bccb688cd00(mazin.sqlBuilder.constraints)", "2591744203542921089");
  private static SNodePointer breakingNode_vw8nfq_a0a1a0a0a1a0b0a2a0 = new SNodePointer("r:3549da7a-55e7-4df5-8c08-3bccb688cd00(mazin.sqlBuilder.constraints)", "2591744203542970169");

  public ColumnReference_Constraints() {
    super("mazin.sqlBuilder.structure.ColumnReference");
  }

  @Override
  protected Map<String, ReferenceConstraintsDescriptor> getNotDefaultReferences() {
    Map<String, ReferenceConstraintsDescriptor> references = new HashMap();
    references.put("table", new BaseReferenceConstraintsDescriptor("table", this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }

      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseReferenceScopeProvider() {
          @Override
          public boolean hasPresentation() {
            return true;
          }

          @Override
          public String getPresentation(final IOperationContext operationContext, final ReferencePresentationContext _context) {
            return (StringUtils.isNotEmpty(SPropertyOperations.getString(_context.getParameterNode(), "name")) ?
              SPropertyOperations.getString(_context.getParameterNode(), "name") :
              SPropertyOperations.getString(SLinkOperations.getTarget(_context.getParameterNode(), "table", false), "name")
            );
          }

          @Override
          public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
            SNode select = SNodeOperations.getAncestor(_context.getEnclosingNode(), "mazin.sqlBuilder.structure.SelectQuery", false, false);
            Iterable<SNode> tableReference = null;
            if (select != null && SLinkOperations.getTarget(select, "fromBlock", true) != null) {
              tableReference = SLinkOperations.getTargets(SLinkOperations.getTarget(select, "fromBlock", true), "tableReference", true);
            }
            return tableReference;
          }

          @Override
          public SNodePointer getSearchScopeValidatorNode() {
            return breakingNode_vw8nfq_a0a3a0a0a1a0b0a1a0;
          }
        };
      }
    });
    references.put("column", new BaseReferenceConstraintsDescriptor("column", this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }

      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseReferenceScopeProvider() {
          @Override
          public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
            List<SNode> columns = null;
            if (_context.getReferenceNode() != null && SLinkOperations.getTarget(_context.getReferenceNode(), "table", false) != null && SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getReferenceNode(), "table", false), "table", false) != null) {
              columns = SLinkOperations.getTargets(SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getReferenceNode(), "table", false), "table", false), "column", true);
            }
            return columns;
          }

          @Override
          public SNodePointer getSearchScopeValidatorNode() {
            return breakingNode_vw8nfq_a0a1a0a0a1a0b0a2a0;
          }
        };
      }
    });
    return references;
  }
}
